문제 및 해결 방안 정리
1. React 번들 파일 로드 실패 (ERR_FILE_NOT_FOUND)
    • 문제 원인:
    • Content script에서 번들 파일 경로를 지정할 때 "build/" 폴더를 포함시키면, 확장 프로그램을 로드할 때 build 폴더가 이미 루트로 간주되어 잘못된 경로가 됩니다.
    • 번들 파일 이름에 해시가 포함되어 매 빌드마다 변경될 수 있음.
    해결 방안:
    • Content script에서는 경로에서 "build/"를 빼고, 예를 들어 "static/js/main.[hash].js" 형식으로 지정.
    • 실제 빌드 후 생성된 파일 이름(예: main.3b590f5f.js)와 일치하도록 수정.
    • Chrome 확장 프로그램 로드시 build 폴더를 선택하여 확장 프로그램의 루트로 사용.
2. web_accessible_resources 설정 누락
    • 문제 원인:
    • Manifest V3에서는 외부 페이지(구글 검색 페이지)나 content script가 확장 프로그램 내부 리소스(React 번들, renderSidebarCall.js 등)에 접근하려면, 해당 리소스를 web_accessible_resources에 등록해야 합니다.
    해결 방안:
    • manifest.json에 "web_accessible_resources" 섹션에 "static/js/*.js", "static/css/*.css", 그리고 새로 추가한 renderSidebarCall.js를 포함하여 모든 리소스에 대해 접근 권한을 부여.
3. window.renderSidebar가 정의되지 않음
    • 문제 원인:
    • index.js에서 전역 함수(window.renderSidebar)를 정의했음에도 불구하고, Content script는 아이솔레이트 월드에서 실행되어 페이지의 전역(window)과 분리되어 있습니다.
    해결 방안:
    • Content script에서 직접 inline 스크립트를 실행하는 대신, 별도의 외부 파일(renderSidebarCall.js)을 만들어 페이지 컨텍스트에서 window.renderSidebar를 호출하도록 하고, 이 파일을 web_accessible_resources에 등록합니다.
    • 또는 커스텀 이벤트나 메시지 전달 방식을 이용하여 페이지 컨텍스트의 window.renderSidebar를 호출할 수 있도록 구현합니다.
4. Inline 스크립트 실행 거부 (CSP 문제)
    • 문제 원인:
    • 최신 Content Security Policy (CSP)에서는 inline 스크립트 실행을 기본적으로 거부합니다.
    해결 방안:
    • inline 스크립트를 사용하지 않고, 별도의 파일(renderSidebarCall.js)을 생성하여 이 파일을 로드함으로써 CSP 제한을 우회합니다.   


페이지/파일 별 역할
1. src/index.js
    • 역할:
    • React 애플리케이션의 진입점으로, 메인 React 컴포넌트인 Sidebar를 렌더링합니다.
    • 전역 함수 window.renderSidebar를 정의하여, 페이지 컨텍스트에서 content script가 이 함수를 호출할 수 있도록 합니다.
    • 기본적으로 #root 요소에도 렌더링할 수 있도록 옵션 코드를 포함합니다.
2. src/components/Sidebar.js
    • 역할:
    • 사이드바의 UI를 구성하는 React 컴포넌트를 정의합니다.
    • index.js와 renderSidebar 함수에서 사용되어, 실제 검색 결과 페이지 우측에 표시될 콘텐츠를 담당합니다.
3. public/content/content.js (Content Script)
    • 역할:
    • 구글 검색 결과 페이지에 주입되어, 동적으로 사이드바용 DOM 요소(컨테이너)를 생성합니다.
    • React 번들 파일을 로드하여 페이지 컨텍스트에 전달합니다.
    • 별도의 파일(renderSidebarCall.js)을 인젝션하여, 페이지 컨텍스트에서 window.renderSidebar를 호출해 사이드바를 렌더링하도록 합니다.
4. public/renderSidebarCall.js
    • 역할:
    • 이 파일은 페이지 컨텍스트에서 실행되어, 전역에 정의된 window.renderSidebar 함수를 호출합니다.
    • CSP 문제를 피하기 위해 inline 스크립트 대신 별도의 파일로 구현되었습니다.
5. manifest.json
    • 역할:
    • 확장 프로그램의 메타데이터, 권한, content script, 옵션 페이지, 그리고 웹 접근 리소스(web_accessible_resources) 설정을 관리합니다.
    • 외부 페이지(구글 검색 결과)에서 React 번들 및 renderSidebarCall.js 파일에 접근할 수 있도록 허용합니다.
6. public/options/index.html
    • 역할:
    • 확장 프로그램 옵션(팝업) 페이지로, 사용자 설정 등의 기능을 제공할 수 있습니다.